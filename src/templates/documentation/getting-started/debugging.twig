{% set title = 'Debugging with PHP using Xdebug & Debug ' %}

{% set introduction %}
    Debugging is important in troubleshooting what is going on with your software.  There are a number of good methods to figure out what is happening them, in Tina4 we have a <code>Debug</code> class which helps with that.
    The most efficient way to debug your application is using step by step debugging in an IDE supporting PHP debugging.  The most comprehensive debugging extension for PHP is probably xdebug.
    <i><b>Remember that Xdebug is trying to connect to a port on your IDE</b></i>, the most common ports are 9000,9001,9003.  If you use PHPStorm or IntelliJ the default is 9003.
{% endset %}

{% set requirements = ['Bash', 'Command', 'PHP'] %}

{% set content %}
    <h5>Debugging with Docker</h5>
    <p>
        The example below shows how you can run Xdebug from the docker passing your ip address in on the commandline so the debugger can connect to your IDE.
        <pre><code>{{ include_code("examples/debugging-run-from-docker.twig"| raw) }}</code></pre>
    </p>
    <h5>Installing XDebug on PHP</h5>
    <p>
        First download or install XDebug by following the instructions <a href="https://xdebug.org/docs/install" target="_blank">here</a>.
        After you have downloaded / installed Xdebug on your system you need to configure your php.ini file
        <pre><code>{{ include_code("examples/debugging-example-php.twig"| raw) }}</code></pre>
    </p>
    <h5>Running XDebug with composer</h5>
    <p>
    Running debug mode for PHP can be done easily by prefixing your computer IP before you run composer using <code>client_host=</code>.
    <pre><code>{{ include_code("examples/debugging-run-from-composer.twig"| raw) }}</code></pre>
    </p>
    <h5>Using Debugging in Tina4 </h5>
    <p>
        In your <code>.env</code> file you can turn debugging on or off and you can specify the exact debugging level you wish to use.  Valid debug levels are
        <pre><code>TINA4_LOG_EMERGENCY
TINA4_LOG_ALERT
TINA4_LOG_CRITICAL
TINA4_LOG_ERROR
TINA4_LOG_WARNING
TINA4_LOG_NOTICE
TINA4_LOG_INFO
TINA4_LOG_DEBUG
TINA4_LOG_ALL</code></pre>
    </p>
    <img class="img-fluid" src="/src/templates/documentation/images/debugging-env.png" alt="Setting the debug level in .env">
    <p>
    Follow the debugging messages in your command line or tail or view the <code>log/debug.log</code> file
    </p>
    <img class="img-fluid" src="/src/templates/documentation/images/debugging.png" alt="Viewing the debugging in the command line">
    <p>Add to the debug log by using the built in <code>Debug</code> class </p>
    <pre><code>\Tina4\Debug::message("This is some debugging", TINA4_NOTICE)</code></pre>
{% endset %}

{% set tips = [
    'Get your ip address in windows by running <code>ipconfig</code> from command line',
    'On windows, rename the downloaded dll file to <code>php_xdebug.dll</code> to make it easier to manage',
    'Find out where to edit your php.ini file by running <code>php -i | grep php.ini</code> from the command line',
    'Make sure you match the Xdebug version you download exactly with the correct version of php you use. <code> php -v </code>',
    'Confirm Xdebug is installed by running <code>php -m</code>',
    'Use the Tina4-Debug header on your browser to link up calls to the application and the debug log'
]
%}

{% include "documentation/components/help-segment.twig" %}