{% set title = 'Twig - How to extend with Tina4' %}

{% set introduction %}
Twig is a popular templating engine which Tina4 uses across all platforms, so even if you're using the Javascript or Python version of Tina4, you will be able to use the same templating engine on all these environments.
Let's have a look how we can extend Twig easily using the built in <code>Config</code> functionality in Tina4.
{% endset %}

{% set requirements = ['Routing', 'Twig', 'HTML'] %}

{% set content %}
    <h5>Using Config to add functionality to Twig</h5>
    <p>Below is an example of how you can extend Twig with an example of adding a filter, global & function in your index.php file
    <pre><code>{{ include_code("examples/config-extending-twig.twig"| raw) }}</code></pre>
    </p>
    <p>
    <pre><code>{{ include_code("examples/example-extending-twig-store.twig"| raw) }}</code></pre>
    </p>
    <h5>Using the extended Twig functionality:</h5>
    <p>
    <pre><code>{{ include_code("examples/example-extending-twig.twig"| raw) }}</code></pre>
    </p>
{% endset %}

{% set tips = [
    'You don\'t need to add all your methods inside <code>index.php</code>, you can always pass the <code>$config</code> variable to each class you have and use it to add the needed Twig functionality',
    '<code>global $twig</code> is the variable to Twig if you want to use it directly in your code',
    '<code>\Tina4\\renderTemplate()</code> is the method to use to render a twig file',
    'All twig templates are stored by default in <code>src/templates</code> and this path can be overwritten if you define a <code>TINA4_TEMPLATE_LOCATIONS</code> array in the <code>index.php</code>, perhaps you need to add more paths?'
]
%}

{% include "documentation/components/help-segment.twig" %}