{% set title = 'ORM - Object Relational Mapping' %}

{% set introduction %}
    ORM - Object Relational Mapping - is a technique that lets you query and manipulate data from a database using an object-oriented paradigm. When talking about ORM, most people are referring to a library that implements the Object-Relational Mapping technique, hence the phrase "an ORM".
{% endset %}

{% set requirements = ['Database', 'Objects'] %}

{% set content %}
    <h5>Getting Started with ORM</h5>
    <p>Consider the following SQlite3 database table stored inside a database called test.db:
    <pre><code>{{ include_code("examples/orm1.twig"| raw) }}</code></pre>
    </p>
    <p>Now we can use the tina4 command prompt to create our ORM objects<br>
    For windows <code>php bin\tina4</code> and on Mac or linux <code>tina4</code>
    <pre><code>{{ include_code("examples/orm2.twig"| raw) }}</code></pre>
    </p>
    <p>Choose menu option 4 and press Return, if you do not have a database connection you will be prompted to create one, see our help about database connections.
    <pre><code>{{ include_code("examples/orm3.twig"| raw) }}</code></pre>
    </p>
    <p>You should see a screen like this:
    <pre><code>{{ include_code("examples/orm4.twig"| raw) }}</code></pre>
    All the ORM objects are placed in the <code>src/orm</code> folder and can be used in your code.
    You can also create these files manually, here is an example of the <code>src/orm/Test.php</code> file:
    <pre><code>{{ include_code("examples/orm5.twig"| raw) }}</code></pre>
    The most important properties on the class are the <code>$tableName</code>, <code>$primaryKey</code> and fields.  Note that the fields are mapped to the database naming convention from camel case.
    All your ORM objects should extend the <code>Tina4\ORM</code> class in order for the magic to happen.
    </p>
    <h5>Using ORM objects in your code</h5>
    <p>Here are some practical ways of using ORM objects in code:</p>
    <p>The most basic way to save data to the database is as follows, notice how you can echo out the id after saving the object:
    <pre><code>{{ include_code("examples/orm6.twig"| raw) }}</code></pre>
    </p>
    <p>Should we want to retrieve the record we can use the load method
    <pre><code>{{ include_code("examples/orm7.twig"| raw) }}</code></pre>
    </p>
    <p>There are some other special cases when using the ORM to load up files or binary data into a table and then of course deleting a record.
        Use the <code>delete</code> method passing the primary key as a parameter or relevant filter.
    <pre><code>{{ include_code("examples/orm8.twig"| raw) }}</code></pre>
    </p>
    <p>
        Finally, here we see how we can manipulate large amounts of data into the table or get a list of records from the table.
    <pre><code>{{ include_code("examples/orm9.twig"| raw) }}</code></pre>
    </p>
    <h5>Conclusion</h5>
    <p>Using ORM means you do not have to write common SQL statements, all your data manipulation is done with code</p>

{% endset %}

{% set tips = [
    'To make life easier for yourself add an id column to each table and make it the primary key',
    'ORM is not a replacement for SQL, it is a tool to make your life easier',
    'Camel case fields are mapped to database naming, <code>firstName</code> becomes <code>first_name</code>',
    'The ORM object constructor takes an array, object or JSON as an input parameter to populate the object',
]
%}

{% include "documentation/components/help-segment.twig" %}