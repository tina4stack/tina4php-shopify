{% set title = 'Functional Testing' %}

{% set introduction %}
    The most common way to write tests in PHP is using PHPUnit or Codeception, but they require a lot of configuration and may
    be hard to use for beginners. Our functional testing framework is done using annotations and simple evaluations. It is a good way
    to start your test driven development journey.  Once you have the basics running you can then move on to PHPUnit or Codeception.
{% endset %}

{% set requirements = ['TTD', 'Annotations'] %}

{% set content %}
    <h5>Our first test</h5>
    <p>The first example is a simple test checks if the answer of the sum of two numbers is actually correct. We will look at how we can go about the process of TTD.
    First we create the function that will return the sum of two numbers, we deliberately return 0 as we want to check if our tests work.
    <pre><code>{{ include_code("examples/ttd1.twig"| raw) }}</code></pre>
    </p>
    <p>
        Next we add a single test using the <code>@test</code> annotation and then <code>assert</code>.  We want to assert if the sum of 1 and 2 is 3.  The message if the test fails is after the assertion separated by a comma.
        So our pattern for a test is as follows: <code> assert method(arguments) === expected, message</code>  The <code>===</code> operator can be replaced with any other operator.
        <pre><code>{{ include_code("examples/ttd2.twig"| raw) }}</code></pre>
    </p>
    <p>Open up a terminal in the root of the project and run the test using:
    <pre><code>{{ include_code("examples/ttd3.twig"| raw) }}</code></pre>
    </p>
    <p>You should have received something similar on your console:
    <pre><code>{{ include_code("examples/ttd4.twig"| raw) }}</code></pre>
    </p>
    <p>Let's fix the function to return the correct answer:
    <pre><code>{{ include_code("examples/ttd5.twig"| raw) }}</code></pre>
    </p>
    <p>Run the tests again using:
    <pre><code>{{ include_code("examples/ttd3.twig"| raw) }}</code></pre>
    </p>
    <p>You should see something similar to this:
    <pre><code>{{ include_code("examples/ttd6.twig"| raw) }}</code></pre>
    </p>
    <h5>Conclusion</h5>
    <p>You can add as many tests per method as you want, in this way you can think of many test scenarios which should exist before you code out your method.
        The annotated tests work on Class methods as well, you can use <code>$this</code> in your assert statements to access the class methods and properties.
    </p>
{% endset %}

{% set tips = [
    'Look into \Tina4\Auth for more advanced test examples',
    '<code>"is_array", "is_object", "is_bool", "is_double", "is_float", "is_integer", "is_null", "is_string", "is_int", "is_numeric", "is_long", "is_callable", "is_countable", "is_iterable", "is_scalar", "is_real", "is_resource"</code> are methods you can use with your assert statement',
    'You can call normal PHP functions as well in your assert statement',
    'The assert statement must evaluate to true for the test to pass',
    'You can add tags for your tests so that only specific tests run, for example <code>@tests app</code> will be targeted by running <code>composer test app</code>'
]
%}

{% include "documentation/components/help-segment.twig" %}